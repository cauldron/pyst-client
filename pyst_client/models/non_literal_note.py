# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from datetime import datetime

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from pyst_client.models.multilingual_string import MultilingualString
from pyst_client.models.node import Node
from typing import Optional, Set
from typing_extensions import Self

class NonLiteralNote(BaseModel):
    """
    Used for skos:changeNote, skos:historyNote, and skos:editorialNote.  SKOS allows for string literals but we require an author and timestamp for each.
    """ # noqa: E501
    http___www_w3_org_1999_02_22_rdf_syntax_nsvalue: Annotated[List[MultilingualString], Field(min_length=1, max_length=1)] = Field(alias="http://www.w3.org/1999/02/22-rdf-syntax-ns#value")
    http___purl_org_dc_terms_creator: Annotated[List[Node], Field(min_length=1)] = Field(alias="http://purl.org/dc/terms/creator")
    http___purl_org_dc_terms_issued: Annotated[List[datetime], Field(min_length=1, max_length=1)] = Field(alias="http://purl.org/dc/terms/issued")
    __properties: ClassVar[List[str]] = ["http://www.w3.org/1999/02/22-rdf-syntax-ns#value", "http://purl.org/dc/terms/creator", "http://purl.org/dc/terms/issued"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NonLiteralNote from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in http___www_w3_org_1999_02_22_rdf_syntax_nsvalue (list)
        _items = []
        if self.http___www_w3_org_1999_02_22_rdf_syntax_nsvalue:
            for _item_http___www_w3_org_1999_02_22_rdf_syntax_nsvalue in self.http___www_w3_org_1999_02_22_rdf_syntax_nsvalue:
                if _item_http___www_w3_org_1999_02_22_rdf_syntax_nsvalue:
                    _items.append(_item_http___www_w3_org_1999_02_22_rdf_syntax_nsvalue.to_dict())
            _dict['http://www.w3.org/1999/02/22-rdf-syntax-ns#value'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in http___purl_org_dc_terms_creator (list)
        _items = []
        if self.http___purl_org_dc_terms_creator:
            for _item_http___purl_org_dc_terms_creator in self.http___purl_org_dc_terms_creator:
                if _item_http___purl_org_dc_terms_creator:
                    _items.append(_item_http___purl_org_dc_terms_creator.to_dict())
            _dict['http://purl.org/dc/terms/creator'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NonLiteralNote from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "http://www.w3.org/1999/02/22-rdf-syntax-ns#value": [MultilingualString.from_dict(_item) for _item in obj["http://www.w3.org/1999/02/22-rdf-syntax-ns#value"]] if obj.get("http://www.w3.org/1999/02/22-rdf-syntax-ns#value") is not None else None,
            "http://purl.org/dc/terms/creator": [Node.from_dict(_item) for _item in obj["http://purl.org/dc/terms/creator"]] if obj.get("http://purl.org/dc/terms/creator") is not None else None,
            "http://purl.org/dc/terms/issued": obj.get("http://purl.org/dc/terms/issued")
        })
        return _obj


